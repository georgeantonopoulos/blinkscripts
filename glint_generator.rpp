#define PI 3.14159265359f

// Simple spatial hash function (generates float 0-1 from int2)
float hash(int2 p) {
  unsigned int h = (unsigned int)p.x * 73856093u ^ (unsigned int)p.y * 19349663u;
  h = (h ^ 61u) ^ (h >> 16u);
  h = h * 9u;
  h = (h ^ 61u) ^ (h >> 16u);
  h = h * 9u;
  h = h ^ (h >> 4u);
  h = h * 668265261u;
  h = h ^ (h >> 15u);
  return float(h) / 4294967295.0f;
}

kernel GlintGenerator : ImageComputationKernel<ePixelWise> {
  Image<eRead, eAccessRandom, eEdgeClamped> src; // Input image with random access
  Image<eWrite> dst; // Output image - Now only the effect

  // Parameters
  param:
    float threshold;
    float size;
    float intensity;
    int   num_arms;
    float thickness; // degrees
    float rotation;  // degrees
    float falloff;
    float sharpness;
    float aberration;
    float sizeLuminanceScale; // How much luminance affects size
    float sizeVariation;      // Random size variation (0-1)
    float rotationVariation;  // Random rotation variation (degrees)
    float intensityVariation; // Random intensity variation (0-1)
    float thicknessVariation; // Thickness variation (0-1)
    float thresholdSmoothness; // Smoothness range above threshold
    float aberrationVariation; // Random variation in aberration strength (0-1)
    float thicknessFalloff;    // How thickness decreases with distance (e.g., 1.0)

  // Define parameters with defaults and labels for the Nuke UI
  void define() {
    defineParam(threshold, "Threshold", 0.8f);
    defineParam(size, "Size", 50.0f);
    defineParam(intensity, "Intensity", 1.0f);
    defineParam(num_arms, "Arms", 12);
    defineParam(thickness, "Thickness (Deg)", 1.5f);
    defineParam(rotation, "Rotation (Deg)", 0.0f);
    defineParam(falloff, "Falloff", 1.0f);
    defineParam(sharpness, "Sharpness", 2.5f);
    defineParam(aberration, "Aberration", 0.01f);
    defineParam(sizeLuminanceScale, "Size Luma Scale", 0.5f);
    defineParam(sizeVariation, "Size Variation", 0.2f);
    defineParam(rotationVariation, "Rotation Variation", 15.0f);
    defineParam(intensityVariation, "Intensity Variation", 0.3f);
    defineParam(thicknessVariation, "Thickness Variation", 0.5f);
    defineParam(thresholdSmoothness, "Threshold Smoothness", 0.1f);
    defineParam(aberrationVariation, "Aberration Variation", 0.5f);
    defineParam(thicknessFalloff, "Thickness Falloff", 1.0f);
  }

  // Process function executed for each output pixel
  void process(int2 pos) {
    float4 finalGlintColor = float4(0.0f);
    int baseSearchRadius = int(ceil(size * (1.0f + sizeLuminanceScale + sizeVariation))); // Estimate max possible search radius
    float baseThicknessRad = thickness * PI / 180.0f; // Store base thickness
    float baseRotationRad = rotation * PI / 180.0f; // Store base rotation

    for (int iy_offset = -baseSearchRadius; iy_offset <= baseSearchRadius; ++iy_offset) {
      for (int ix_offset = -baseSearchRadius; ix_offset <= baseSearchRadius; ++ix_offset) {
        int2 offset = int2(ix_offset, iy_offset);
        int2 center_pos = pos + offset;
        float4 centerPixelValue = src(center_pos.x, center_pos.y);
        float centerLuminance = dot(float3(centerPixelValue.x, centerPixelValue.y, centerPixelValue.z), float3(0.2126f, 0.7152f, 0.0722f));

        if (centerLuminance > threshold) {
          // --- Calculate Threshold Factor ---
          float thresholdFactor = 1.0f;
          if (thresholdSmoothness > 1e-5f) { // Avoid division by zero
              thresholdFactor = clamp((centerLuminance - threshold) / thresholdSmoothness, 0.0f, 1.0f);
          }

          // --- Calculate per-highlight variations ---
          float randVal1 = hash(center_pos);
          float randVal2 = hash(center_pos + int2(1, 1));
          float randVal3 = hash(center_pos - int2(1, 1));
          float randVal4 = hash(center_pos + int2(1, 0));

          // Size variation based on luminance and randomness
          float currentSize = size * (1.0f + sizeLuminanceScale * (centerLuminance - threshold)); // Luma scale applied first
          currentSize = currentSize * (1.0f + sizeVariation * (randVal1 * 2.0f - 1.0f)); // Then random variation (+/-)
          currentSize = max(0.0f, currentSize); // Ensure size >= 0

          // Rotation variation based on randomness
          float currentRotationRad = baseRotationRad + rotationVariation * (PI / 180.0f) * (randVal2 * 2.0f - 1.0f); // +/- variation

          // Apply Intensity Variation
          float currentIntensity = intensity * (1.0f + intensityVariation * (randVal3 * 2.0f - 1.0f));
          currentIntensity = max(0.0f, currentIntensity); // Ensure >= 0

          // Calculate varied aberration strength
          float currentAberration = aberration * (1.0f + aberrationVariation * (randVal4 * 2.0f - 1.0f));
          currentAberration = max(0.0f, currentAberration); // Ensure >= 0

          // --- Proceed with calculations using currentSize and currentRotationRad ---
          float2 delta = float2(float(-ix_offset), float(-iy_offset));
          float dist = length(delta);

          // --- Glint Arm Calculation ---
          if (dist > 1e-5f && dist < currentSize) { // Use currentSize
            float angle = atan2(delta.y, delta.x) + currentRotationRad; // Use currentRotationRad
            float min_angle_diff = PI;
            float closest_arm_angle = 0.0f; // Store angle of the closest arm

            // Find closest arm and its angle
            for (int i = 0; i < num_arms; ++i) {
              float arm_angle = (2.0f * PI * i) / num_arms;
              float diff = angle - arm_angle;
              diff = atan2(sin(diff), cos(diff)); // Normalize diff
              float abs_diff = fabs(diff);
              if (abs_diff < min_angle_diff) {
                  min_angle_diff = abs_diff;
                  closest_arm_angle = arm_angle; // Store this arm's angle
              }
            }

            // Calculate thickness variation based on closest arm's orientation
            float orientation_factor = cos(closest_arm_angle * 2.0f); // +1 horizontal, -1 vertical, 0 diagonal
            float currentThicknessRad = baseThicknessRad * (1.0f + thicknessVariation * orientation_factor);
            currentThicknessRad = max(1e-5f, currentThicknessRad); // Prevent zero thickness

            // Calculate distance-based thickness falloff factor
            float distanceThicknessFactor = pow(max(0.0f, 1.0f - (dist / currentSize)), thicknessFalloff);

            // Apply falloff to get final thickness for this pixel
            float finalThicknessRad = currentThicknessRad * distanceThicknessFactor;
            finalThicknessRad = max(1e-5f, finalThicknessRad); // Ensure non-zero

            // Check against the final varied thickness
            if (min_angle_diff < finalThicknessRad / 2.0f) {
              // Use finalThicknessRad for sharpness calculation
              float sharpness_factor = cos(min_angle_diff * PI / finalThicknessRad);
              sharpness_factor = pow(sharpness_factor, sharpness);
              float base_glint_brightness = currentIntensity * centerLuminance * sharpness_factor * thresholdFactor;

              // Apply REVERSED + VARIED aberration for falloff (Warm Center / Cool Tips)
              // Red/Green fall off together, Blue falls off slowest
              float dist_r = dist; // Make Red fall off same as Green
              float dist_g = dist;
              float dist_b = dist * (1.0f - currentAberration); // '-' makes distance smaller -> slower falloff

              float falloff_r = pow(max(0.0f, 1.0f - (dist_r / currentSize)), falloff);
              float falloff_g = pow(max(0.0f, 1.0f - (dist_g / currentSize)), falloff);
              float falloff_b = pow(max(0.0f, 1.0f - (dist_b / currentSize)), falloff);

              finalGlintColor.x += centerPixelValue.x * base_glint_brightness * falloff_r;
              finalGlintColor.y += centerPixelValue.y * base_glint_brightness * falloff_g;
              finalGlintColor.z += centerPixelValue.z * base_glint_brightness * falloff_b;
            }
          }
        }
      }
    }

    finalGlintColor.w = max(finalGlintColor.x, max(finalGlintColor.y, finalGlintColor.z));
    dst() = finalGlintColor;
  }
}; 